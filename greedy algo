# exp 3: Implement Greedy algorithm for any of the following application 
# - selection sort
# - minimum spanning tree
# - single source shortest path problem
# - job scheduling problem
# - prims minimal spanning tree algorithm
# - kruskal minimal spanning tree algo
# - dijikstra minimal spanning tree algo

sol : # we have used kruskal minimal spanning tree 


class Graph:  
    def __init__(self, vertices):  
        self.vertices = vertices  
        self.edges = []  
        self.adjacency_list = {v: [] for v in vertices}  
  
    def add_edge(self, u, v, weight):  
        self.edges.append((u, v, weight))  
        self.adjacency_list[u].append((v, weight))  
        self.adjacency_list[v].append((u, weight))  
  
    def find_parent(self, parent, i):  
        if parent[i] == i:  
            return i  
        return self.find_parent(parent, parent[i])  
  
    def union(self, parent, rank, x, y):  
        root_x = self.find_parent(parent, x)  
        root_y = self.find_parent(parent, y)  
        
        if rank[root_x] < rank[root_y]:  
            parent[root_x] = root_y  
        elif rank[root_x] > rank[root_y]:  
            parent[root_y] = root_x  
        else:  
            parent[root_y] = root_x  
            rank[root_x] += 1  
  
    def kruskal(self):  
        minimum_spanning_tree = set()  
        parent = {}  
        rank = {}  
        
        for v in self.vertices:  
            parent[v] = v  
            rank[v] = 0  
        
        sorted_edges = sorted(self.edges, key=lambda x: x[2])  # Sort edges by weight
        
        for edge in sorted_edges:  
            u, v, weight = edge  
            root_u = self.find_parent(parent, u)  
            root_v = self.find_parent(parent, v)  
            
            if root_u != root_v:  
                minimum_spanning_tree.add(edge)  # Add edge to MST
                self.union(parent, rank, root_u, root_v)  # Union of sets
        
        return minimum_spanning_tree  # Return the minimum spanning tree

# Define graph vertices
vertices = [0, 1, 2, 3]  

# Create graph object
g = Graph(vertices)  

# Add edges to the graph
g.add_edge(0, 1, 5)  
g.add_edge(0, 2, 10)  
g.add_edge(0, 3, 3)  
g.add_edge(1, 3, 1)  
g.add_edge(2, 3, 4)  

# Find the minimum spanning tree using Kruskal's algorithm
minimum_spanning_tree = g.kruskal()  

# Print the edges in the minimum spanning tree
print(minimum_spanning_tree)

or 

# selectionsort 

def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_idx = i
        for j in range(i+1, n):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

arr = [64, 25, 12, 22, 11]
selection_sort(arr)
print("Sorted array:", arr)
