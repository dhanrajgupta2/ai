Implement Greedy search algorithm for any of the following application- minimum spanning tree - Prim's Algorithm

import heapq

class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.adj = {v: [] for v in vertices}

    def add_edge(self, u, v, w):
        self.adj[u].append((v, w))
        self.adj[v].append((u, w))

    def prim(self):
        start = self.vertices[0]
        visited = set([start])
        edges = [(w, start, v) for v, w in self.adj[start]]
        heapq.heapify(edges)
        mst = set()

        while edges and len(visited) < len(self.vertices):
            w, u, v = heapq.heappop(edges)
            if v not in visited:
                visited.add(v)
                mst.add((u, v, w))
                for to, weight in self.adj[v]:
                    if to not in visited:
                        heapq.heappush(edges, (weight, v, to))
        return mst

# Usage
g = Graph([0, 1, 2, 3])
for u, v, w in [(0,1,5), (0,2,10), (0,3,3), (1,3,1), (2,3,4)]:
    g.add_edge(u, v, w)

print(g.prim())
